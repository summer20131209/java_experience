#### set log levels ###
#log4j.rootLogger = debug , stdout , D , E
#
#### 输出到控制台 ###
#log4j.appender.stdout = org.apache.log4j.ConsoleAppender
#log4j.appender.stdout.Target = System.out
### 输出INFO级别以上的日志
#log4j.appender.stdout.Threshold = INFO
#log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
#log4j.appender.stdout.layout.ConversionPattern = %d{ABSOLUTE} %5p %c{1}:%L - %m%n
#
#### 输出到日志文件 ###
#log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
#log4j.appender.D.File = D:/logs/log.log
#log4j.appender.D.Append = true
### 输出DEBUG级别以上的日志
#log4j.appender.D.Threshold = DEBUG
#log4j.appender.D.layout = org.apache.log4j.PatternLayout
#log4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} [ %t:%r ] - [ %p ] %m%n
#
#### 保存异常信息到单独文件 ###
#log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
### 异常日志文件名
#log4j.appender.E.File = D:/logs/error.log
#log4j.appender.E.Append = true
### 只输出ERROR级别以上的日志!!!
#log4j.appender.E.Threshold = ERROR
#log4j.appender.E.layout = org.apache.log4j.PatternLayout
#log4j.appender.E.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} [ %t:%r ] - [ %p ] %m%n

##########################################################################################################################
# 建议使用以下最优配置：
##########################################################################################################################

#############
# 输出到控制台
#############

# log4j.rootLogger日志输出类别和级别：只输出不低于该级别的日志信息DEBUG < INFO < WARN < ERROR < FATAL
# WARN：日志级别     CONSOLE：输出位置自己定义的一个名字       logfile：输出位置自己定义的一个名字
log4j.rootLogger=INFO,CONSOLE,logfile,dailyFile
# 配置CONSOLE输出到控制台
log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender 
# 配置CONSOLE设置为自定义布局模式
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout 
# 配置CONSOLE日志的输出格式  [frame] 2019-08-22 22:52:12,000  %r耗费毫秒数 %p日志的优先级 %t线程名 %C所属类名通常为全类名 %L代码中的行号 %x线程相关联的NDC %m日志 %n换行
log4j.appender.CONSOLE.layout.ConversionPattern=[java_experience] %d{yyyy-MM-dd HH:mm:ss,SSS} - %-4r %-5p [%t] %C:%L %x - %m%n

################
# 输出到日志文件中
################

# 配置logfile输出到文件中 文件大小到达指定尺寸的时候产生新的日志文件
log4j.appender.logfile=org.apache.log4j.RollingFileAppender
# 保存编码格式
log4j.appender.logfile.Encoding=UTF-8
# 输出文件位置此为项目根目录下的logs文件夹中
log4j.appender.logfile.File=logs/root.log
# 后缀可以是KB,MB,GB达到该大小后创建新的日志文件
log4j.appender.logfile.MaxFileSize=10KB
# 设置滚定文件的最大值3 指可以产生root.log.1、root.log.2、root.log.3和root.log四个日志文件
log4j.appender.logfile.MaxBackupIndex=3
# 配置logfile为自定义布局模式
log4j.appender.logfile.layout=org.apache.log4j.PatternLayout
log4j.appender.logfile.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %F %p %m%n

##########################
# 每天产生一个日志文件(dailyFile)，建议开发时用这个
# 详细可参考：log4j使用之DailyRollingFileAppender教程：https://www.jiweichengzhu.com/article/15e33772d5194c1f9c185aff28c3b4df
##########################
log4j.appender.dailyFile=org.apache.log4j.DailyRollingFileAppender
#指定输出级别
log4j.appender.dailyFile.Threshold=INFO
#日志立即输出，不用缓冲，默认为true
log4j.appender.dailyFile.ImmediateFlush=true
#因为是文件，所以会有追加的动作，控制是否追加，还是覆盖，默认为true
log4j.appender.dailyFile.Append=true
#配置日志文件路径，在logs目录下生成日志文件
log4j.appender.dailyFile.File=logs/dailyFile.log
#配置回滚文件的后缀格式，比较人性化，默认是'.'yyyy-MM-dd，RollingFileAppender就不行，必须是123依次增加
#我这个格式，最终生成的文件就会是长这样：dailyFile.log-2019-05-07.log，所以如果需要看起来输入点儿，上面的file参数就不要带或追
log4j.appender.dailyFile.DatePattern='-'yyyy-MM-dd'.log'
#选择输出方式
log4j.appender.dailyFile.layout=org.apache.log4j.PatternLayout
#配置日志输出格式
log4j.appender.dailyFile.layout.ConversionPattern=[java_experience] %d{yyyy-MM-dd HH:mm:ss} [%5p] - %c:%L - %m%n

##########################
# 对不同的类输出不同的日志文件
##########################

# club.bagedate包下的日志单独输出
#log4j.logger.club.bagedate=DEBUG,bagedate
## 设置为false该日志信息就不会加入到rootLogger中了
#log4j.additivity.club.bagedate=false
## 下面就和上面配置一样了
#log4j.appender.bagedate=org.apache.log4j.RollingFileAppender
#log4j.appender.bagedate.Encoding=UTF-8
#log4j.appender.bagedate.File=logs/bagedate.log
#log4j.appender.bagedate.MaxFileSize=10MB
#log4j.appender.bagedate.MaxBackupIndex=3
#log4j.appender.bagedate.layout=org.apache.log4j.PatternLayout
#log4j.appender.bagedate.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %F %p %m%n
